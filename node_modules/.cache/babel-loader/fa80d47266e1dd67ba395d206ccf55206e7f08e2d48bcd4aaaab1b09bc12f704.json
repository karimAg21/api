{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karim\\\\Desktop\\\\firstapp\\\\src\\\\moviesInfo\\\\Series.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport './App.css';\nimport Aff from \"./AfficheSer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Serie() {\n  _s();\n  const [series, setSeries] = useState([]);\n  const [loading, setLoading] = useState(true); // Track loading state\n  const [error, setError] = useState(null); // Track error state\n\n  useEffect(() => {\n    axios.get(`http://www.omdbapi.com/?apikey=4a78675b&s=from&type=series`).then(res => {\n      if (res.data.Search) {\n        setSeries(res.data.Search); // Update series state\n      } else {\n        setError(\"No series found.\");\n      }\n      setLoading(false); // End loading after data is fetched\n    }).catch(error => {\n      setError(\"Error fetching data: \" + error.message);\n      setLoading(false);\n    });\n  }, []); // Empty dependency array to only run this effect once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"con\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), !loading && !error && series.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No series found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 53\n    }, this), !loading && !error && series.length > 0 && series.map((se, i) => /*#__PURE__*/_jsxDEV(Aff, {\n      serie: se\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Serie, \"wlOHwXRO4eNeA+N4bWrIQa1A6uo=\");\n_c = Serie;\nvar _c;\n$RefreshReg$(_c, \"Serie\");","map":{"version":3,"names":["axios","useState","useEffect","Aff","jsxDEV","_jsxDEV","Serie","_s","series","setSeries","loading","setLoading","error","setError","get","then","res","data","Search","catch","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","se","i","serie","_c","$RefreshReg$"],"sources":["C:/Users/karim/Desktop/firstapp/src/moviesInfo/Series.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './App.css';\r\nimport Aff from \"./AfficheSer\";\r\n\r\nexport default function Serie() {\r\n  const [series, setSeries] = useState([]);\r\n  const [loading, setLoading] = useState(true);  // Track loading state\r\n  const [error, setError] = useState(null);      // Track error state\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`http://www.omdbapi.com/?apikey=4a78675b&s=from&type=series`)\r\n      .then(res => {\r\n        if (res.data.Search) {\r\n          setSeries(res.data.Search); // Update series state\r\n        } else {\r\n          setError(\"No series found.\");\r\n        }\r\n        setLoading(false);  // End loading after data is fetched\r\n      })\r\n      .catch(error => {\r\n        setError(\"Error fetching data: \" + error.message);\r\n        setLoading(false);\r\n      });\r\n  }, []); // Empty dependency array to only run this effect once\r\n\r\n  return (\r\n    <div className=\"con\">\r\n      {loading && <div>Loading...</div>}\r\n      {error && <div>{error}</div>}\r\n      {!loading && !error && series.length === 0 && <div>No series found.</div>}\r\n      {!loading && !error && series.length > 0 && \r\n        series.map((se, i) => (\r\n          <Aff serie={se} key={i} />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,OAAOC,GAAG,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAM;;EAE/CC,SAAS,CAAC,MAAM;IACdF,KAAK,CACFc,GAAG,CAAC,4DAA4D,CAAC,CACjEC,IAAI,CAACC,GAAG,IAAI;MACX,IAAIA,GAAG,CAACC,IAAI,CAACC,MAAM,EAAE;QACnBT,SAAS,CAACO,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;MAC9B,CAAC,MAAM;QACLL,QAAQ,CAAC,kBAAkB,CAAC;MAC9B;MACAF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC,CACDQ,KAAK,CAACP,KAAK,IAAI;MACdC,QAAQ,CAAC,uBAAuB,GAAGD,KAAK,CAACQ,OAAO,CAAC;MACjDT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjBZ,OAAO,iBAAIL,OAAA;MAAAiB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAChCd,KAAK,iBAAIP,OAAA;MAAAiB,QAAA,EAAMV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC3B,CAAChB,OAAO,IAAI,CAACE,KAAK,IAAIJ,MAAM,CAACmB,MAAM,KAAK,CAAC,iBAAItB,OAAA;MAAAiB,QAAA,EAAK;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACxE,CAAChB,OAAO,IAAI,CAACE,KAAK,IAAIJ,MAAM,CAACmB,MAAM,GAAG,CAAC,IACtCnB,MAAM,CAACoB,GAAG,CAAC,CAACC,EAAE,EAAEC,CAAC,kBACfzB,OAAA,CAACF,GAAG;MAAC4B,KAAK,EAAEF;IAAG,GAAMC,CAAC;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEV;AAACnB,EAAA,CAlCuBD,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}